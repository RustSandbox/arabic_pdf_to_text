name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-binaries:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: arabic_pdf_to_text
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: arabic_pdf_to_text.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: arabic_pdf_to_text
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: arabic_pdf_to_text
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create archive
      shell: bash
      run: |
        staging="arabic_pdf_to_text-${{ github.ref_name }}-${{ matrix.target }}"
        mkdir -p "$staging"
        cp target/${{ matrix.target }}/release/${{ matrix.binary }} "$staging/"
        cp README.md LICENSE "$staging/"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi
    
    - name: Upload release asset
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ASSET }}
        path: ${{ env.ASSET }}

  create-release:
    name: Create GitHub Release
    needs: [publish-crate, build-binaries]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}